AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation Sample Template IAM_Users_Groups_and_Policies: Sample
  template showing how to create IAM users, groups and policies. It creates a single
Parameters:
  # The name of an existing key pair
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  # Instance type
  InstanceType:
    Description: The type of EC2 instance to launch
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.nano
    ConstraintDescription: the type must be a valid EC2 type

    # Instance type
  Ec2Image:
    Description: The image of the instance to launch. It is created from an EC2 image. Choose an existing image in the account
    Type: String 
    Default: ami-02c15110d5e4df437
    ConstraintDescription: must be the name of an existing image

# Mappings
Mappings:
  RegionMap: # the ami to lauch
    us-east-1:
      HVM64: ami-04d29b6f966df1537
    us-east-2:
      HVM64: ami-09558250a3419e7d0
    us-west-1:
      HVM64: ami-08d9a394ac1c2994c      
    us-west-2:
      HVM64: ami-0e472933a1395e172 

Resources: 

  # ALB
  
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ApplicationLB
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - !ImportValue CloudInfrastructure-PubSubnet1ID
        - !ImportValue CloudInfrastructure-PubSubnet2ID
  
  # Load Balancer Security group
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP ingress
      VpcId: !ImportValue CloudInfrastructure-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0       
      Tags: 
        - Key: Name 
          Value: CodeDeployLB-sg

  # target group
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      #HealthCheckPath: /var/www/html/index.php
      HealthCheckPath: /index.html
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200-499'
      VpcId: !ImportValue CloudInfrastructure-VPCID
      Targets:
        - Id: !ImportValue Application-WebServerId
          Port: 80
      Tags: 
        - Key: Name 
          Value: CodeDeployTG

  # ALB Listeners
  ALBListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

#   # ALB Listeners
#   ALBListenerHTTPS:
#    Type: "AWS::ElasticLoadBalancingV2::Listener"
#    Properties:
#     Certificates: 
#       - arn:aws:acm:us-east-1:258972849027:certificate/50b8906c-cb46-4dc3-bb9d-104a3328b22b 
#     DefaultActions:
#       - Type: "forward"
#         TargetGroupArn: !Ref ALBTargetGroup
#     LoadBalancerArn: !Ref ApplicationLoadBalancer
#     Port: 443
#     Protocol: "HTTPS" 

#   # HTTP Listeners with redirect to HTTPS
#   ALBListenerHTTP:
#     Type: "AWS::ElasticLoadBalancingV2::Listener"
#     Properties:
#       DefaultActions:
#        - Type: "redirect"
#          RedirectConfig:
#           Protocol: "HTTPS"
#           Port: 443
#           Host: "#{host}"
#           Path: "/#{path}"
#           Query: "#{query}"
#           StatusCode: "HTTP_301"
#       LoadBalancerArn: !Ref ApplicationLoadBalancer
#       Port: 80
#       Protocol: "HTTP"


  # Webserver Auto scalling group with cloudwatch monitoring
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - !ImportValue CloudInfrastructure-PubSubnet1ID
        - !ImportValue CloudInfrastructure-PubSubnet2ID
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '0'
      MaxSize: '4'
      DesiredCapacity: '0' 
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name 
          PropagateAtLaunch: true 
          Value: CodeDeployASG
      # NotificationConfigurations:
      # - TopicARN: !Ref MySNSTopic
      #   NotificationTypes:
      #   - autoscaling:EC2_INSTANCE_LAUNCH
      #   - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
      #   - autoscaling:EC2_INSTANCE_TERMINATE
      #   - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      #   - autoscaling:TEST_NOTIFICATION

  # Launch configuration
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !ImportValue Iam-Ec2CodeDeployS3InstProfileName
      ImageId: !Ref Ec2Image
      #InstanceId: String
      #InstanceMonitoring: Boolean
      InstanceType: !Ref InstanceType # link to the instance type param
      #KernelId: String
      KeyName: !Ref KeyPairName
      LaunchConfigurationName: CodeDeployLaunchConfig
      SecurityGroups: 
        - !ImportValue Application-WebServerSgId
      #UserData: !Base64 
        

#   # SNS Topic   
#   MySNSTopic:
#     Type: AWS::SNS::Topic
#     Properties:
#       Subscription: 
#       - Endpoint: "ncharlotte8@gmail.com"
#         Protocol: email
#       - Endpoint: "training@cloudspaceconsulting.com"
#         Protocol: email
#       TopicName: "snsTopicForAutoScaling"

#   #Scale Out Policy
#   myScaleOutPolicy:
#     Type: AWS::AutoScaling::ScalingPolicy
#     Properties:
#       AdjustmentType: ChangeInCapacity
#       AutoScalingGroupName: !Ref WebServerGroup
#       ScalingAdjustment: '1'

#   # Alarm for CPU utilisation higher that 70%
#   CPUAlarmHigh:
#     Type: AWS::CloudWatch::Alarm
#     Properties:
#       EvaluationPeriods: '1'
#       Statistic: Average
#       Threshold: '70'
#       AlarmDescription: Alarm if CPU too high or metric disappears indicating instances
#         is down
#       Period: '60'
#       AlarmActions:
#       - !Ref MySNSTopic
#       - !Ref myScaleOutPolicy
#       Namespace: AWS/EC2
#       Dimensions:
#       - Name: AutoScalingGroupName
#         Value:
#           Ref: WebServerGroup
#       ComparisonOperator: GreaterThanThreshold
#       MetricName: CPUUtilization

#   # Scale in Policy
#   myScaleInPolicy:
#     Type: AWS::AutoScaling::ScalingPolicy
#     Properties:
#       AdjustmentType: ChangeInCapacity
#       AutoScalingGroupName: !Ref WebServerGroup
#       ScalingAdjustment: '-1'

#   # Alarm for CPU utilisation lower that 30%
#   CPUAlarmLow:
#     Type: AWS::CloudWatch::Alarm
#     Properties:
#       EvaluationPeriods: '1'
#       Statistic: Average
#       Threshold: '30'
#       AlarmDescription: Alarm if CPU low or metric disappears indicating instance
#         is down
#       Period: '60'
#       AlarmActions:
#       - !Ref MySNSTopic
#       - !Ref myScaleInPolicy
#       Namespace: AWS/EC2
#       Dimensions:
#       - Name: AutoScalingGroupName
#         Value:
#           Ref: WebServerGroup
#       ComparisonOperator: LessThanThreshold
#       MetricName: CPUUtilization
    
#   # S3 bucket for clients 
#   AfricanfinancialClientsS3Bucket:
#     Type: 'AWS::S3::Bucket' 
#     Description: S3 bucket with default encryption           
#     Properties:
#       BucketName: clientsdatabucket
#       AccessControl: Private
#       LifecycleConfiguration:
#         Rules:
#           - Id: GlacierRule
#             Prefix: glacier
#             Status: Enabled
#             ExpirationInDays: '1825'
#             Transitions:
#               - TransitionInDays: 30
#                 StorageClass: GLACIER
#       BucketEncryption:
#         ServerSideEncryptionConfiguration:
#           - ServerSideEncryptionByDefault:
#               SSEAlgorithm: 'aws:kms'
#               KMSMasterKeyID: KMS-KEY-ARN
#     DeletionPolicy: Delete 


# Outputs
Outputs:
  # Auto scaling group
  ASGname:
    Description: Auto scaling group name
    Value: !Ref WebServerGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASGName'

  ALBname:
    Description: Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub '${AWS::StackName}-ALBname'
  